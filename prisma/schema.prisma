// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/lib/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DB_PATH")
}

model Meta {
  id   Int    @id @default(autoincrement())
  info String
  data Bytes
}

model Archive {
  id         Int  @id @default(autoincrement())
  tableId    Int
  entityPk1  Int
  entityPk2  Int?
  revisionId Int
  payload    Json

  revision Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)

  @@index([tableId, entityPk1, entityPk2])
}

model Revision {
  id          Int @id @default(autoincrement())
  createdOn   Int
  createdById Int

  createdBy   User         @relation("createdByUser", fields: [createdById], references: [id])
  users       User[]
  groups      Group[]
  memberships Membership[]
  categories  Category[]
  receipts    Receipt[]
  items       Item[]
  itemShares  ItemShare[]
  archives    Archive[]
}

model User {
  id             Int     @id @default(autoincrement())
  revisionId     Int
  statusId       Int     @default(0)
  email          String
  name           String?
  image          String?
  defaultGroupId Int?

  revision         Revision     @relation(fields: [revisionId], references: [id], onDelete: Cascade)
  createdRevisions Revision[]   @relation("createdByUser")
  memberships      Membership[]
  defaultGroup     Group?       @relation("defaultGroup", fields: [defaultGroupId], references: [id])
  itemShares       ItemShare[]
  receipts         Receipt[]
}

model Group {
  id          Int     @id @default(autoincrement())
  revisionId  Int
  statusId    Int     @default(0)
  name        String
  description String?
  uuid        String?

  revision        Revision     @relation(fields: [revisionId], references: [id], onDelete: Cascade)
  memberships     Membership[]
  categories      Category[]
  receipts        Receipt[]
  defaultingUsers User[]       @relation("defaultGroup")
}

model Membership {
  userId            Int
  groupId           Int
  revisionId        Int
  statusId          Int  @default(0)
  defaultCategoryId Int?

  revision        Revision  @relation(fields: [revisionId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id])
  group           Group     @relation(fields: [groupId], references: [id])
  defaultCategory Category? @relation(fields: [defaultCategoryId], references: [id])

  @@id([userId, groupId])
}

model Category {
  id          Int     @id @default(autoincrement())
  revisionId  Int
  statusId    Int     @default(0)
  groupId     Int
  name        String
  description String?

  revision              Revision     @relation(fields: [revisionId], references: [id], onDelete: Cascade)
  group                 Group        @relation(fields: [groupId], references: [id])
  defaultingMemberships Membership[]
}

model Receipt {
  id         Int @id @default(autoincrement())
  revisionId Int
  statusId   Int @default(0)
  groupId    Int
  paidById   Int
  paidOn     Int

  revision Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)
  group    Group    @relation(fields: [groupId], references: [id])
  items    Item[]
  paidBy   User     @relation(fields: [paidById], references: [id])
}

model Item {
  id         Int     @id @default(autoincrement())
  revisionId Int
  statusId   Int     @default(0)
  receiptId  Int
  categoryId Int
  cost       Int
  notes      String?

  revision   Revision    @relation(fields: [revisionId], references: [id], onDelete: Cascade)
  receipt    Receipt     @relation(fields: [receiptId], references: [id])
  itemShares ItemShare[]
}

model ItemShare {
  itemId     Int
  userId     Int
  revisionId Int
  statusId   Int @default(0)
  share      Int

  revision Revision @relation(fields: [revisionId], references: [id], onDelete: Cascade)
  item     Item     @relation(fields: [itemId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  @@id([itemId, userId])
}
